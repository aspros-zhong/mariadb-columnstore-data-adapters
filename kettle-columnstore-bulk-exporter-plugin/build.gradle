group 'com.mariadb.columnstore.api.kettle'
import java.security.MessageDigest;
import java.security.DigestInputStream;

version '1.1.5'

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

project.ext.mcsapi_dependency_version = "1.1.5"

project.ext.kettle_dependency_revision = "8.1.0.0-SNAPSHOT"
project.ext.pentaho_metadata_dependency_revision = "8.1.0.0-SNAPSHOT"

repositories {
        jcenter()
        maven { url "https://public.nexus.pentaho.org/content/groups/omni/" }
        flatDir {
                dirs "/usr/lib", "/usr/lib64", "/usr/local/lib/", "/usr/local/lib64/"
        }
}

configurations.all {
        resolutionStrategy {
                failOnVersionConflict()
                preferProjectModules()

                //force transitive dependenceis that can't be resolved to the correct version
                force 'xml-apis:xml-apis:1.0.b2', 'org.eclipse.core:commands:3.3.0-I20070605-0010', 'org.eclipse:swt:3.3.0-v3346'
        }

}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

configurations {
        provided
        compile {
                extendsFrom provided
        }

        zip
}

compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
        compile name: "javamcsapi-${project.ext.mcsapi_dependency_version}"
        provided "org.pentaho:pentaho-metadata:${project.ext.pentaho_metadata_dependency_revision}"
        provided "pentaho-kettle:kettle-core:${project.ext.kettle_dependency_revision}"
        provided "pentaho-kettle:kettle-engine:${project.ext.kettle_dependency_revision}"
        provided "pentaho-kettle:kettle-ui-swt:${project.ext.kettle_dependency_revision}"
}

jar {
    classifier = getGitHash()
    manifest {
        attributes "build-revision": getGitHash()
        attributes "build-version": version
    }
}

def getHashFromJavaMcsapiManifest = { fileName ->
    java.util.jar.JarFile javamcsapi = null; 
    for (entry in configurations.compile.resolve()){
        String absolutPath = entry.getAbsolutePath()
        if (absolutPath.endsWith("javamcsapi-${project.ext.mcsapi_dependency_version}.jar")){
            javamcsapi = new java.util.jar.JarFile(absolutPath)
            break
        }
    }
    return javamcsapi.manifest.getAttributes(fileName).getValue("MD5-Digest")
}

def generateMD5(File file) {
   file.withInputStream {
      new DigestInputStream(it, MessageDigest.getInstance('MD5')).withStream {
         it.eachByte {}
         it.messageDigest.digest().encodeHex() as String
      }
   }
}

task copyAndSetRPATH {

    String libjavamcsapi_so_hash = null
    try{
        libjavamcsapi_so_hash = getHashFromJavaMcsapiManifest("libjavamcsapi.so")
    } catch(Exception e){
        System.err.println("can't obtain hash for libjavamcsapi.so from javamcsapi.jar's manifest")
        throw e
    }
    
    File[] potential_libjavamcsapi_so_locations = [new File('/usr/lib/libjavamcsapi.so'), new File('/usr/local/lib/libjavamcsapi.so'), new File('/usr/lib64/libjavamcsapi.so'), new File('/usr/local/lib64/libjavamcsapi.so')]
    File libJavaTmp = new File(copyAndSetRPATH.getTemporaryDir().getPath() + '/libjavamcsapi.so')
        
    ext.copyAndChangeRPATH = { library ->
        copy{
            into copyAndSetRPATH.getTemporaryDir()
            from library.getPath()
        }
        if ( libJavaTmp.exists() ){
            exec{
                commandLine "chrpath", "-r", "\$ORIGIN", libJavaTmp.getPath()
            }
        } else{
            throw new GradleException("can't include libjavamcsapi.so, copying from ${library} to " + copyAndSetRPATH.getTemporaryDir().getPath() + " failed")
        }
    }
        boolean found = false
        for (File f in potential_libjavamcsapi_so_locations){
            if ( f.isFile() ){
                if ( generateMD5(f).equals(libjavamcsapi_so_hash) ){
                    copyAndChangeRPATH(f)
                    found = true
                    break
                } else{
                    println libjavamcsapi_so_hash
                    println generateMD5(f)
                    println("info: hash of " + f.getPath() + " doesn't match the hash defined in javamcsapi.jar's manifest. It will not be used for the plugin.")
                }
            }
        }
        if(!found){
            throw new GradleException("can't include libjavamcsapi.so")
        }
}

task plugin(type: Zip){
    dependsOn 'jar'
    dependsOn 'copyAndSetRPATH'

    File libJavaTmp = new File(copyAndSetRPATH.getTemporaryDir().getPath() + '/libjavamcsapi.so')
    File versionInfo = new File(plugin.getTemporaryDir().getPath() + "/version.txt");
    versionInfo.text = """Version: $version
Revision: ${getGitHash}
"""
        into("${project.name}/") {
            from jar.outputs.files
            from versionInfo
        }

        String libmcsapi_so_hash = null
        try{
            libmcsapi_so_hash = getHashFromJavaMcsapiManifest("libmcsapi.so")
        } catch(Exception e){
            System.err.println("can't obtain hash for libmcsapi.so from javamcsapi.jar's manifest")
            throw e
        }

        File[] potential_libmcsapi_so_locations = [new File('/usr/lib/libmcsapi.so.1'), new File('/usr/local/lib/libmcsapi.so.1'), new File('/usr/lib64/libmcsapi.so.1'), new File('/usr/local/lib64/libmcsapi.so.1')]

        def compileDeps = configurations.compile.resolve()
        def providedDeps = configurations.provided.resolve()
        def leftovers = compileDeps - providedDeps
        into("${project.name}/lib") {
            from leftovers
            if ( libJavaTmp.isFile() ){
                from libJavaTmp
            } else {
                throw new GradleException("can't include libjavamcsapi.so")
            }

            boolean found = false
            for (File f in potential_libmcsapi_so_locations){
                if ( f.isFile() ){
                    if (generateMD5(f).equals(libmcsapi_so_hash) ){
                        from f
                        found = true
                        break
                     } else {
                         println("info: hash of " + f.getPath() + " doesn't match the hash defined in javamcsapi.jar's manifest. It will not be used for the plugin.")
                     }
                }
            }
            if (!found){
                throw new GradleException("can't include libmcsapi.so.1")
            }
        }

        // clean up temporary files
        delete{
            versionInfo
            libJavaTmp
        }
}
